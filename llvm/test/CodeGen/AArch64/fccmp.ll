; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=aarch64-- | FileCheck %s --check-prefixes=CHECK,SDISEL
; RUN: llc < %s -mtriple=aarch64-- -global-isel | FileCheck %s --check-prefixes=CHECK,GISEL

; Ensure chains of comparisons produce chains of `fccmp`

; (x0 < x1) && (x2 > x3)
define i1 @fcmp_and2(float %0, float %1, float %2, float %3) {
; SDISEL-LABEL: fcmp_and2:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    fcmp s0, s1
; SDISEL-NEXT:    fccmp s2, s3, #4, mi
; SDISEL-NEXT:    cset w0, gt
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: fcmp_and2:
; GISEL:       // %bb.0:
; GISEL-NEXT:    fcmp s0, s1
; GISEL-NEXT:    cset w8, mi
; GISEL-NEXT:    fcmp s2, s3
; GISEL-NEXT:    cset w9, gt
; GISEL-NEXT:    and w0, w8, w9
; GISEL-NEXT:    ret
  %5 = fcmp olt float %0, %1
  %6 = fcmp ogt float %2, %3
  %7 = and i1 %5, %6
  ret i1 %7
}

; (x0 < x1) && (x2 > x3) && (x4 != x5)
define i1 @fcmp_and3(float %0, float %1, float %2, float %3, float %4, float %5) {
; SDISEL-LABEL: fcmp_and3:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    fcmp s0, s1
; SDISEL-NEXT:    fccmp s2, s3, #4, mi
; SDISEL-NEXT:    fccmp s4, s5, #4, gt
; SDISEL-NEXT:    cset w0, ne
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: fcmp_and3:
; GISEL:       // %bb.0:
; GISEL-NEXT:    fcmp s0, s1
; GISEL-NEXT:    cset w8, mi
; GISEL-NEXT:    fcmp s2, s3
; GISEL-NEXT:    cset w9, gt
; GISEL-NEXT:    fcmp s4, s5
; GISEL-NEXT:    and w8, w8, w9
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    and w0, w8, w9
; GISEL-NEXT:    ret
  %7 = fcmp olt float %0, %1
  %8 = fcmp ogt float %2, %3
  %9 = and i1 %7, %8
  %10 = fcmp une float %4, %5
  %11 = and i1 %9, %10
  ret i1 %11
}

; (x0 < x1) && (x2 > x3) && (x4 != x5) && (x6 == x7)
define i1 @cmp_and4(float %0, float %1, float %2, float %3, float %4, float %5, float %6, float %7) {
; SDISEL-LABEL: cmp_and4:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    fcmp s0, s1
; SDISEL-NEXT:    fccmp s2, s3, #4, mi
; SDISEL-NEXT:    fccmp s4, s5, #4, gt
; SDISEL-NEXT:    fccmp s6, s7, #0, ne
; SDISEL-NEXT:    cset w0, eq
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: cmp_and4:
; GISEL:       // %bb.0:
; GISEL-NEXT:    fcmp s0, s1
; GISEL-NEXT:    cset w8, mi
; GISEL-NEXT:    fcmp s2, s3
; GISEL-NEXT:    cset w9, gt
; GISEL-NEXT:    fcmp s4, s5
; GISEL-NEXT:    and w8, w8, w9
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    fcmp s6, s7
; GISEL-NEXT:    and w8, w8, w9
; GISEL-NEXT:    cset w9, eq
; GISEL-NEXT:    and w0, w8, w9
; GISEL-NEXT:    ret
  %9 = fcmp olt float %0, %1
  %10 = fcmp ogt float %2, %3
  %11 = and i1 %9, %10
  %12 = fcmp une float %4, %5
  %13 = and i1 %11, %12
  %14 = fcmp oeq float %6, %7
  %15 = and i1 %13, %14
  ret i1 %15
}

; (x0 < x1) || (x2 > x3)
define i1 @cmp_or2(float %0, float %1, float %2, float %3) {
; SDISEL-LABEL: cmp_or2:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    fcmp s0, s1
; SDISEL-NEXT:    fccmp s2, s3, #0, pl
; SDISEL-NEXT:    cset w0, gt
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: cmp_or2:
; GISEL:       // %bb.0:
; GISEL-NEXT:    fcmp s0, s1
; GISEL-NEXT:    cset w8, mi
; GISEL-NEXT:    fcmp s2, s3
; GISEL-NEXT:    cset w9, gt
; GISEL-NEXT:    orr w0, w8, w9
; GISEL-NEXT:    ret
  %5 = fcmp olt float %0, %1
  %6 = fcmp ogt float %2, %3
  %7 = or i1 %5, %6
  ret i1 %7
}

; (x0 < x1) || (x2 > x3) || (x4 != x5)
define i1 @cmp_or3(float %0, float %1, float %2, float %3, float %4, float %5) {
; SDISEL-LABEL: cmp_or3:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    fcmp s0, s1
; SDISEL-NEXT:    fccmp s2, s3, #0, pl
; SDISEL-NEXT:    fccmp s4, s5, #0, le
; SDISEL-NEXT:    cset w0, ne
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: cmp_or3:
; GISEL:       // %bb.0:
; GISEL-NEXT:    fcmp s0, s1
; GISEL-NEXT:    cset w8, mi
; GISEL-NEXT:    fcmp s2, s3
; GISEL-NEXT:    cset w9, gt
; GISEL-NEXT:    fcmp s4, s5
; GISEL-NEXT:    orr w8, w8, w9
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    orr w0, w8, w9
; GISEL-NEXT:    ret
  %7 = fcmp olt float %0, %1
  %8 = fcmp ogt float %2, %3
  %9 = or i1 %7, %8
  %10 = fcmp une float %4, %5
  %11 = or i1 %9, %10
  ret i1 %11
}

; (x0 < x1) || (x2 > x3) || (x4 != x5) || (x6 == x7)
define i1 @cmp_or4(float %0, float %1, float %2, float %3, float %4, float %5, float %6, float %7) {
; SDISEL-LABEL: cmp_or4:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    fcmp s0, s1
; SDISEL-NEXT:    fccmp s2, s3, #0, pl
; SDISEL-NEXT:    fccmp s4, s5, #0, le
; SDISEL-NEXT:    fccmp s6, s7, #4, eq
; SDISEL-NEXT:    cset w0, eq
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: cmp_or4:
; GISEL:       // %bb.0:
; GISEL-NEXT:    fcmp s0, s1
; GISEL-NEXT:    cset w8, mi
; GISEL-NEXT:    fcmp s2, s3
; GISEL-NEXT:    cset w9, gt
; GISEL-NEXT:    fcmp s4, s5
; GISEL-NEXT:    orr w8, w8, w9
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    fcmp s6, s7
; GISEL-NEXT:    orr w8, w8, w9
; GISEL-NEXT:    cset w9, eq
; GISEL-NEXT:    orr w0, w8, w9
; GISEL-NEXT:    ret
  %9 = fcmp olt float %0, %1
  %10 = fcmp ogt float %2, %3
  %11 = or i1 %9, %10
  %12 = fcmp une float %4, %5
  %13 = or i1 %11, %12
  %14 = fcmp oeq float %6, %7
  %15 = or i1 %13, %14
  ret i1 %15
}

; (x0 != 0) || (x1 != 0)
define i1 @true_or2(float %0, float %1) {
; SDISEL-LABEL: true_or2:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    movi d2, #0000000000000000
; SDISEL-NEXT:    fcmp s0, #0.0
; SDISEL-NEXT:    fccmp s1, s2, #0, eq
; SDISEL-NEXT:    cset w0, ne
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: true_or2:
; GISEL:       // %bb.0:
; GISEL-NEXT:    fcmp s0, #0.0
; GISEL-NEXT:    cset w8, ne
; GISEL-NEXT:    fcmp s1, #0.0
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    orr w0, w8, w9
; GISEL-NEXT:    ret
  %3 = fcmp une float %0, 0.000000e+00
  %4 = fcmp une float %1, 0.000000e+00
  %5 = or i1 %3, %4
  ret i1 %5
}

; (x0 != 0) || (x1 != 0) || (x2 != 0)
define i1 @true_or3(float %0, float %1, float %2) {
; SDISEL-LABEL: true_or3:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    movi d3, #0000000000000000
; SDISEL-NEXT:    fcmp s0, #0.0
; SDISEL-NEXT:    fccmp s1, s3, #0, eq
; SDISEL-NEXT:    fccmp s2, s3, #0, eq
; SDISEL-NEXT:    cset w0, ne
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: true_or3:
; GISEL:       // %bb.0:
; GISEL-NEXT:    fcmp s0, #0.0
; GISEL-NEXT:    cset w8, ne
; GISEL-NEXT:    fcmp s1, #0.0
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    fcmp s2, #0.0
; GISEL-NEXT:    orr w8, w8, w9
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    orr w0, w8, w9
; GISEL-NEXT:    ret
  %4 = fcmp une float %0, 0.000000e+00
  %5 = fcmp une float %1, 0.000000e+00
  %6 = or i1 %4, %5
  %7 = fcmp une float %2, 0.000000e+00
  %8 = or i1 %6, %7
  ret i1 %8
}

; (x0 != 0) || (x1 != 0)
define i1 @true_and2(float %0, float %1) {
; SDISEL-LABEL: true_and2:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    movi d2, #0000000000000000
; SDISEL-NEXT:    fcmp s0, #0.0
; SDISEL-NEXT:    fccmp s1, s2, #4, ne
; SDISEL-NEXT:    cset w0, ne
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: true_and2:
; GISEL:       // %bb.0:
; GISEL-NEXT:    fcmp s0, #0.0
; GISEL-NEXT:    cset w8, ne
; GISEL-NEXT:    fcmp s1, #0.0
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    and w0, w8, w9
; GISEL-NEXT:    ret
  %3 = fcmp une float %0, 0.000000e+00
  %4 = fcmp une float %1, 0.000000e+00
  %5 = and i1 %3, %4
  ret i1 %5
}

; (x0 != 0) || (x1 != 0) || (x2 != 0)
define i1 @true_and3(float %0, float %1, float %2) {
; SDISEL-LABEL: true_and3:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    movi d3, #0000000000000000
; SDISEL-NEXT:    fcmp s0, #0.0
; SDISEL-NEXT:    fccmp s1, s3, #4, ne
; SDISEL-NEXT:    fccmp s2, s3, #4, ne
; SDISEL-NEXT:    cset w0, ne
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: true_and3:
; GISEL:       // %bb.0:
; GISEL-NEXT:    fcmp s0, #0.0
; GISEL-NEXT:    cset w8, ne
; GISEL-NEXT:    fcmp s1, #0.0
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    fcmp s2, #0.0
; GISEL-NEXT:    and w8, w8, w9
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    and w0, w8, w9
; GISEL-NEXT:    ret
  %4 = fcmp une float %0, 0.000000e+00
  %5 = fcmp une float %1, 0.000000e+00
  %6 = and i1 %4, %5
  %7 = fcmp une float %2, 0.000000e+00
  %8 = and i1 %6, %7
  ret i1 %8
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
