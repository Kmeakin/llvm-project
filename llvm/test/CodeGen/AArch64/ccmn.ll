; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=aarch64-- | FileCheck %s --check-prefixes=CHECK,SDISEL

; w0 == -1 && w1 == -2
define i1 @w0_eq_minus_1_and_w1_eq_minus_2(i32 %0, i32 %1) {
; CHECK-LABEL: w0_eq_minus_1_and_w1_eq_minus_2:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmn w1, #2
; CHECK-NEXT:    ccmn w0, #1, #0, eq
; CHECK-NEXT:    cset w0, eq
; CHECK-NEXT:    ret
  %3 = icmp eq i32 %0, -1
  %4 = icmp eq i32 %1, -2
  %5 = and i1 %3, %4
  ret i1 %5
}

; w0 == -30 && w1 == -31
define i1 @w0_eq_minus_30_and_w1_eq_minus_31(i32 %0, i32 %1) {
; CHECK-LABEL: w0_eq_minus_30_and_w1_eq_minus_31:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmn w1, #31
; CHECK-NEXT:    ccmn w0, #30, #0, eq
; CHECK-NEXT:    cset w0, eq
; CHECK-NEXT:    ret
  %3 = icmp eq i32 %0, -30
  %4 = icmp eq i32 %1, -31
  %5 = and i1 %3, %4
  ret i1 %5
}

; x0 == -1 && x1 == -2
define i1 @x0_eq_minus_1_and_x1_eq_minus_2(i64 %0, i64 %1) {
; CHECK-LABEL: x0_eq_minus_1_and_x1_eq_minus_2:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmn x1, #2
; CHECK-NEXT:    ccmn x0, #1, #0, eq
; CHECK-NEXT:    cset w0, eq
; CHECK-NEXT:    ret
  %3 = icmp eq i64 %0, -1
  %4 = icmp eq i64 %1, -2
  %5 = and i1 %3, %4
  ret i1 %5
}

; x0 == -30 && x1 == -31
define i1 @x0_eq_minus_30_and_x1_eq_minus_31(i64 %0, i64 %1) {
; CHECK-LABEL: x0_eq_minus_30_and_x1_eq_minus_31:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmn x1, #31
; CHECK-NEXT:    ccmn x0, #30, #0, eq
; CHECK-NEXT:    cset w0, eq
; CHECK-NEXT:    ret
  %3 = icmp eq i64 %0, -30
  %4 = icmp eq i64 %1, -31
  %5 = and i1 %3, %4
  ret i1 %5
}

; w0 == -w1 && w2 == w3
define i1 @w0_eq_minus_w1_and_w2_eq_minus_w3(i32 %0, i32 %1, i32 %2, i32 %3) {
; CHECK-LABEL: w0_eq_minus_w1_and_w2_eq_minus_w3:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmn w1, w0
; CHECK-NEXT:    ccmn w3, w2, #0, eq
; CHECK-NEXT:    cset w0, eq
; CHECK-NEXT:    ret
  %5 = sub i32 0, %1
  %6 = icmp eq i32 %5, %0
  %7 = sub i32 0, %3
  %8 = icmp eq i32 %7, %2
  %9 = and i1 %6, %8
  ret i1 %9
}

; x0 == -x1 && x2 == x3
define i1 @x0_eq_minus_x1_and_x2_eq_minus_x3(i64 %0, i64 %1, i64 %2, i64 %3) {
; CHECK-LABEL: x0_eq_minus_x1_and_x2_eq_minus_x3:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmn x1, x0
; CHECK-NEXT:    ccmn x3, x2, #0, eq
; CHECK-NEXT:    cset w0, eq
; CHECK-NEXT:    ret
  %5 = sub i64 0, %1
  %6 = icmp eq i64 %5, %0
  %7 = sub i64 0, %3
  %8 = icmp eq i64 %7, %2
  %9 = and i1 %6, %8
  ret i1 %9
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; SDISEL: {{.*}}
