; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=aarch64-- | FileCheck %s --check-prefixes=CHECK,SDISEL
; RUN: llc < %s -mtriple=aarch64-- -global-isel | FileCheck %s --check-prefixes=CHECK,GISEL

; Ensure chains of comparisons produce chains of `ccmp`, `ccmn` or `fccmp`.

; (x0 < x1) && (x2 > x3)
define i1 @icmp_and2(i32 %x0, i32 %x1, i32 %x2, i32 %x3) {
; SDISEL-LABEL: icmp_and2:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    cmp w0, w1
; SDISEL-NEXT:    ccmp w2, w3, #0, lo
; SDISEL-NEXT:    cset w0, hi
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: icmp_and2:
; GISEL:       // %bb.0:
; GISEL-NEXT:    cmp w0, w1
; GISEL-NEXT:    cset w8, lo
; GISEL-NEXT:    cmp w2, w3
; GISEL-NEXT:    cset w9, hi
; GISEL-NEXT:    and w0, w8, w9
; GISEL-NEXT:    ret
  %cmp1 = icmp ult i32 %x0, %x1
  %cmp2 = icmp ugt i32 %x2, %x3
  %and1 = and i1 %cmp1, %cmp2
  ret i1 %and1
}

; (x0 < x1) && (x2 > x3) && (x4 != x5)
define i1 @icmp_and3(i32 %x0, i32 %x1, i32 %x2, i32 %x3, i32 %x4, i32 %x5) {
; SDISEL-LABEL: icmp_and3:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    cmp w0, w1
; SDISEL-NEXT:    ccmp w2, w3, #0, lo
; SDISEL-NEXT:    ccmp w4, w5, #4, hi
; SDISEL-NEXT:    cset w0, ne
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: icmp_and3:
; GISEL:       // %bb.0:
; GISEL-NEXT:    cmp w0, w1
; GISEL-NEXT:    cset w8, lo
; GISEL-NEXT:    cmp w2, w3
; GISEL-NEXT:    cset w9, hi
; GISEL-NEXT:    cmp w4, w5
; GISEL-NEXT:    cset w10, ne
; GISEL-NEXT:    and w8, w8, w9
; GISEL-NEXT:    and w0, w8, w10
; GISEL-NEXT:    ret
  %cmp1 = icmp ult i32 %x0, %x1
  %cmp2 = icmp ugt i32 %x2, %x3
  %cmp3 = icmp ne i32 %x4, %x5
  %and1 = and i1 %cmp1, %cmp2
  %and2 = and i1 %and1, %cmp3
  ret i1 %and2
}

; (x0 < x1) || (x2 > x3)
define i1 @icmp_or2(i32 %x0, i32 %x1, i32 %x2, i32 %x3) {
; SDISEL-LABEL: icmp_or2:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    cmp w0, w1
; SDISEL-NEXT:    ccmp w2, w3, #0, hs
; SDISEL-NEXT:    cset w0, ne
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: icmp_or2:
; GISEL:       // %bb.0:
; GISEL-NEXT:    cmp w0, w1
; GISEL-NEXT:    cset w8, lo
; GISEL-NEXT:    cmp w2, w3
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    orr w0, w8, w9
; GISEL-NEXT:    ret
  %cmp1 = icmp ult i32 %x0, %x1
  %cmp2 = icmp ne i32 %x2, %x3
  %or1 = or i1 %cmp1, %cmp2
  ret i1 %or1
}

; (x0 < x1) || (x2 > x3) || (x4 != x5)
define i1 @icmp_or3(i32 %x0, i32 %x1, i32 %x2, i32 %x3, i32 %x4, i32 %x5) {
; SDISEL-LABEL: icmp_or3:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    cmp w0, w1
; SDISEL-NEXT:    ccmp w2, w3, #2, hs
; SDISEL-NEXT:    ccmp w4, w5, #0, ls
; SDISEL-NEXT:    cset w0, ne
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: icmp_or3:
; GISEL:       // %bb.0:
; GISEL-NEXT:    cmp w0, w1
; GISEL-NEXT:    cset w8, lo
; GISEL-NEXT:    cmp w2, w3
; GISEL-NEXT:    cset w9, hi
; GISEL-NEXT:    cmp w4, w5
; GISEL-NEXT:    cset w10, ne
; GISEL-NEXT:    orr w8, w8, w9
; GISEL-NEXT:    orr w0, w8, w10
; GISEL-NEXT:    ret
  %cmp1 = icmp ult i32 %x0, %x1
  %cmp2 = icmp ugt i32 %x2, %x3
  %cmp3 = icmp ne i32 %x4, %x5
  %or1 = or i1 %cmp1, %cmp2
  %or2 = or i1 %or1, %cmp3
 ret i1 %or2
}

; (x0 == -x1) && (-x2 != x3)
define i1 @icmn_and2(i32 %x0, i32 %x1, i32 %x2, i32 %x3) {
; SDISEL-LABEL: icmn_and2:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    cmn w0, w1
; SDISEL-NEXT:    ccmn w1, w3, #4, eq
; SDISEL-NEXT:    cset w0, ne
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: icmn_and2:
; GISEL:       // %bb.0:
; GISEL-NEXT:    cmn w0, w1
; GISEL-NEXT:    cset w8, eq
; GISEL-NEXT:    cmn w1, w3
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    and w0, w8, w9
; GISEL-NEXT:    ret
  %neg-x1 = sub i32 0, %x1
  %neg-x2 = sub i32 0, %x2
  %cmp1 = icmp eq i32 %x0, %neg-x1
  %cmp2 = icmp ne i32 %neg-x1, %x3
  %and1 = and i1 %cmp1, %cmp2
  ret i1 %and1
}

; (x0 == -x1) || (-x2 != x3)
define i1 @icmn_or2(i32 %x0, i32 %x1, i32 %x2, i32 %x3) {
; SDISEL-LABEL: icmn_or2:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    cmn w0, w1
; SDISEL-NEXT:    ccmn w1, w3, #0, ne
; SDISEL-NEXT:    cset w0, ne
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: icmn_or2:
; GISEL:       // %bb.0:
; GISEL-NEXT:    cmn w0, w1
; GISEL-NEXT:    cset w8, eq
; GISEL-NEXT:    cmn w1, w3
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    orr w0, w8, w9
; GISEL-NEXT:    ret
  %neg-x1 = sub i32 0, %x1
  %neg-x2 = sub i32 0, %x2
  %cmp1 = icmp eq i32 %x0, %neg-x1
  %cmp2 = icmp ne i32 %neg-x1, %x3
  %ret = or i1 %cmp1, %cmp2
  ret i1 %ret
}

; (x0 == -1) && (x1 == -2)
define i1 @icmn_literal(i32 %x0, i32 %x1) {
; SDISEL-LABEL: icmn_literal:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    cmn w0, #1
; SDISEL-NEXT:    ccmn w1, #2, #4, eq
; SDISEL-NEXT:    cset w0, ne
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: icmn_literal:
; GISEL:       // %bb.0:
; GISEL-NEXT:    cmn w0, #1
; GISEL-NEXT:    cset w8, eq
; GISEL-NEXT:    cmn w1, #2
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    and w0, w8, w9
; GISEL-NEXT:    ret
  %cmp1 = icmp eq i32 %x0, -1
  %cmp2 = icmp ne i32 %x1, -2
  %and1 = and i1 %cmp1, %cmp2
  ret i1 %and1
}

; (x0 != 0) || (x1 != 0)
define i1 @true_or2(i32 %x0, i32 %x1) {
; SDISEL-LABEL: true_or2:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    orr w8, w0, w1
; SDISEL-NEXT:    cmp w8, #0
; SDISEL-NEXT:    cset w0, ne
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: true_or2:
; GISEL:       // %bb.0:
; GISEL-NEXT:    cmp w0, #0
; GISEL-NEXT:    cset w8, ne
; GISEL-NEXT:    cmp w1, #0
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    orr w0, w8, w9
; GISEL-NEXT:    ret
  %cmp1 = icmp ne i32 %x0, 0
  %cmp2 = icmp ne i32 %x1, 0
  %or1 = or i1 %cmp1, %cmp2
  ret i1 %or1
}

; (x0 != 0) || (x1 != 0) || (x2 != 0)
define i1 @true_or3(i32 %x0, i32 %x1, i32 %x2) {
; SDISEL-LABEL: true_or3:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    orr w8, w0, w1
; SDISEL-NEXT:    orr w8, w8, w2
; SDISEL-NEXT:    cmp w8, #0
; SDISEL-NEXT:    cset w0, ne
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: true_or3:
; GISEL:       // %bb.0:
; GISEL-NEXT:    cmp w0, #0
; GISEL-NEXT:    cset w8, ne
; GISEL-NEXT:    cmp w1, #0
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    cmp w2, #0
; GISEL-NEXT:    cset w10, ne
; GISEL-NEXT:    orr w8, w8, w9
; GISEL-NEXT:    orr w0, w8, w10
; GISEL-NEXT:    ret
  %cmp1 = icmp ne i32 %x0, 0
  %cmp2 = icmp ne i32 %x1, 0
  %cmp3 = icmp ne i32 %x2, 0
  %or1 = or i1 %cmp1, %cmp2
  %or2 = or i1 %or1, %cmp3
  ret i1 %or2
}

; (x0 < x1) && (x2 > x3)
define i1 @fcmp_and2(float %x0, float %x1, float %x2, float %x3) {
; SDISEL-LABEL: fcmp_and2:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    fcmp s0, s1
; SDISEL-NEXT:    fccmp s2, s3, #0, lt
; SDISEL-NEXT:    cset w0, hi
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: fcmp_and2:
; GISEL:       // %bb.0:
; GISEL-NEXT:    fcmp s0, s1
; GISEL-NEXT:    cset w8, lt
; GISEL-NEXT:    fcmp s2, s3
; GISEL-NEXT:    cset w9, hi
; GISEL-NEXT:    and w0, w8, w9
; GISEL-NEXT:    ret
  %cmp1 = fcmp ult float %x0, %x1
  %cmp2 = fcmp ugt float %x2, %x3
  %and1 = and i1 %cmp1, %cmp2
  ret i1 %and1
}

; (x0 < x1) && (x2 > x3) && (x4 != x5)
define i1 @fcmp_and3(float %x0, float %x1, float %x2, float %x3, float %x4, float %x5) {
; SDISEL-LABEL: fcmp_and3:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    fcmp s0, s1
; SDISEL-NEXT:    fccmp s2, s3, #0, lt
; SDISEL-NEXT:    fccmp s4, s5, #4, hi
; SDISEL-NEXT:    cset w0, ne
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: fcmp_and3:
; GISEL:       // %bb.0:
; GISEL-NEXT:    fcmp s0, s1
; GISEL-NEXT:    cset w8, lt
; GISEL-NEXT:    fcmp s2, s3
; GISEL-NEXT:    cset w9, hi
; GISEL-NEXT:    fcmp s4, s5
; GISEL-NEXT:    and w8, w8, w9
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    and w0, w8, w9
; GISEL-NEXT:    ret
  %cmp1 = fcmp ult float %x0, %x1
  %cmp2 = fcmp ugt float %x2, %x3
  %cmp3 = fcmp une float %x4, %x5
  %and1 = and i1 %cmp1, %cmp2
  %and2 = and i1 %and1, %cmp3
  ret i1 %and2
}

; (x0 < x1) || (x2 > x3)
define i1 @fcmp_or2(float %x0, float %x1, float %x2, float %x3) {
; SDISEL-LABEL: fcmp_or2:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    fcmp s0, s1
; SDISEL-NEXT:    fccmp s2, s3, #2, ge
; SDISEL-NEXT:    cset w0, hi
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: fcmp_or2:
; GISEL:       // %bb.0:
; GISEL-NEXT:    fcmp s0, s1
; GISEL-NEXT:    cset w8, lt
; GISEL-NEXT:    fcmp s2, s3
; GISEL-NEXT:    cset w9, hi
; GISEL-NEXT:    orr w0, w8, w9
; GISEL-NEXT:    ret
  %cmp1 = fcmp ult float %x0, %x1
  %cmp2 = fcmp ugt float %x2, %x3
  %or1 = or i1 %cmp1, %cmp2
  ret i1 %or1
}

; (x0 < x1) || (x2 > x3) || (x4 != x5)
define i1 @fcmp_or3(float %x0, float %x1, float %x2, float %x3, float %x4, float %x5) {
; SDISEL-LABEL: fcmp_or3:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    fcmp s0, s1
; SDISEL-NEXT:    fccmp s2, s3, #2, ge
; SDISEL-NEXT:    fccmp s4, s5, #0, ls
; SDISEL-NEXT:    cset w0, ne
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: fcmp_or3:
; GISEL:       // %bb.0:
; GISEL-NEXT:    fcmp s0, s1
; GISEL-NEXT:    cset w8, lt
; GISEL-NEXT:    fcmp s2, s3
; GISEL-NEXT:    cset w9, hi
; GISEL-NEXT:    fcmp s4, s5
; GISEL-NEXT:    orr w8, w8, w9
; GISEL-NEXT:    cset w9, ne
; GISEL-NEXT:    orr w0, w8, w9
; GISEL-NEXT:    ret
  %cmp1 = fcmp ult float %x0, %x1
  %cmp2 = fcmp ugt float %x2, %x3
  %cmp3 = fcmp une float %x4, %x5
  %or1 = or i1 %cmp1, %cmp2
  %or2 = or i1 %or1, %cmp3
  ret i1 %or2
}

; (x0 == 0.0) && (x1 == 0.0)
define i1 @fcmp_zero2(float %x0, float %x1) {
; SDISEL-LABEL: fcmp_zero2:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    fcmp s0, #0.0
; SDISEL-NEXT:    fccmp s1, s0, #0, eq
; SDISEL-NEXT:    cset w0, eq
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: fcmp_zero2:
; GISEL:       // %bb.0:
; GISEL-NEXT:    fcmp s0, #0.0
; GISEL-NEXT:    cset w8, eq
; GISEL-NEXT:    fcmp s1, #0.0
; GISEL-NEXT:    cset w9, eq
; GISEL-NEXT:    and w0, w8, w9
; GISEL-NEXT:    ret
  %cmp1 = fcmp oeq float %x0, 0.0
  %cmp2 = fcmp oeq float %x1, 0.0
  %and1 = and i1 %cmp1, %cmp2
  ret i1 %and1
}

; (x0 == 0.0) && (x1 == 0.0) && (x2 == 0.0)
define i1 @fcmp_zero3(float %x0, float %x1, float %x2) {
; SDISEL-LABEL: fcmp_zero3:
; SDISEL:       // %bb.0:
; SDISEL-NEXT:    fcmp s0, #0.0
; SDISEL-NEXT:    movi d3, #0000000000000000
; SDISEL-NEXT:    fccmp s1, s0, #0, eq
; SDISEL-NEXT:    fccmp s2, s3, #0, eq
; SDISEL-NEXT:    cset w0, eq
; SDISEL-NEXT:    ret
;
; GISEL-LABEL: fcmp_zero3:
; GISEL:       // %bb.0:
; GISEL-NEXT:    fcmp s0, #0.0
; GISEL-NEXT:    cset w8, eq
; GISEL-NEXT:    fcmp s1, #0.0
; GISEL-NEXT:    cset w9, eq
; GISEL-NEXT:    fcmp s2, #0.0
; GISEL-NEXT:    and w8, w8, w9
; GISEL-NEXT:    cset w9, eq
; GISEL-NEXT:    and w0, w8, w9
; GISEL-NEXT:    ret
  %cmp1 = fcmp oeq float %x0, 0.0
  %cmp2 = fcmp oeq float %x1, 0.0
  %cmp3 = fcmp oeq float %x2, 0.0
  %and1 = and i1 %cmp1, %cmp2
  %and2 = and i1 %and1, %cmp3
  ret i1 %and2
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
